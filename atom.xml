<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>TLEer&#39;s Blog</title>
  
  
  <link href="http://tleer.github.io/atom.xml" rel="self"/>
  
  <link href="http://tleer.github.io/"/>
  <updated>2021-02-04T23:18:42.616Z</updated>
  <id>http://tleer.github.io/</id>
  
  <author>
    <name>TLEer</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Garsia Wachs</title>
    <link href="http://tleer.github.io/2021/02/05/garsia/"/>
    <id>http://tleer.github.io/2021/02/05/garsia/</id>
    <published>2021-02-04T23:03:14.000Z</published>
    <updated>2021-02-04T23:18:42.616Z</updated>
    
    <content type="html"><![CDATA[<ol><li>找到满足 $q_{k-1} \lt q_{k+1}$ 的最小下标 $k$</li><li>找到满足 $q_{j-1} \gt q_{k-1} + q_k$ 的最大 $j \lt k$</li><li>从列表中清除 $q_{k-1}, q_k$     </li><li>在 $q_{j-1}$ 之后插入 $q_{k-1} + q_k$     </li><li>$q_{-1}$ 和 $q_{n+1}$可以用 $\infty$ 处理<a id="more"></a><table><thead><tr><th align="center">$q-1$</th><th align="center">$q0$</th><th align="center">$q1$</th><th align="center">$q2$</th><th align="center">$q3$</th><th align="center">$q4$</th><th align="center">$q5$</th><th align="center">$k$</th><th align="center">$j$</th></tr></thead><tbody><tr><td align="center">$\infty$</td><td align="center">186</td><td align="center">64</td><td align="center">35</td><td align="center">32</td><td align="center">103</td><td align="center">$\infty$</td><td align="center">3</td><td align="center">1</td></tr><tr><td align="center">$\infty$</td><td align="center">186</td><td align="center">67</td><td align="center">64</td><td align="center">103</td><td align="center">$\infty$</td><td align="center"></td><td align="center">2</td><td align="center">1</td></tr><tr><td align="center">$\infty$</td><td align="center">186</td><td align="center">131</td><td align="center">103</td><td align="center">$\infty$</td><td align="center"></td><td align="center"></td><td align="center">2</td><td align="center">-1</td></tr><tr><td align="center">$\infty$</td><td align="center">234</td><td align="center">186</td><td align="center">$\infty$</td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center">1</td><td align="center">-1</td></tr><tr><td align="center">$\infty$</td><td align="center">420</td><td align="center">$\infty$</td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td></tr></tbody></table></li></ol>]]></content>
    
    
    <summary type="html">&lt;ol&gt;
&lt;li&gt;找到满足 $q_{k-1} \lt q_{k+1}$ 的最小下标 $k$&lt;/li&gt;
&lt;li&gt;找到满足 $q_{j-1} \gt q_{k-1} + q_k$ 的最大 $j \lt k$&lt;/li&gt;
&lt;li&gt;从列表中清除 $q_{k-1}, q_k$     &lt;/li&gt;
&lt;li&gt;在 $q_{j-1}$ 之后插入 $q_{k-1} + q_k$     &lt;/li&gt;
&lt;li&gt;$q_{-1}$ 和 $q_{n+1}$可以用 $\infty$ 处理</summary>
    
    
    
    
    <category term="区间DP" scheme="http://tleer.github.io/tags/%E5%8C%BA%E9%97%B4DP/"/>
    
  </entry>
  
  <entry>
    <title>论碍国者</title>
    <link href="http://tleer.github.io/2021/02/04/aiguo/"/>
    <id>http://tleer.github.io/2021/02/04/aiguo/</id>
    <published>2021-02-04T13:34:35.000Z</published>
    <updated>2021-02-04T13:35:03.881Z</updated>
    
    <content type="html"><![CDATA[<p>作者：Judy<br>链接：<a href="https://www.zhihu.com/question/267547086/answer/1317385509">https://www.zhihu.com/question/267547086/answer/1317385509</a><br>来源：知乎<br>著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。</p><p>不得不说，当代环境下，我国的碍国者真的不在少数，而且大有泛滥和人传人之势。我们从求学开始接受的一切社会科学类知识都是建立在一个“正统”思想下的。倒不是说这个“正统”思想是错的，可以肯定的是，这种主干观念有利于人们民族精神的养成和国家政权的统一，但是，它存在的问题也不容忽视，那就是研究历史也好，探讨政治也罢，长期接受这种观点灌输的人们的立场往往是片面的，而且稍不留神便有可能走向极端。人们对于文化的认同和人的性格一样，包含了三种不同的类型，文化自卑，文化自信和文化自大。原本，我们强调“正统”思想，是为了让一代又一代的国人走出近代以来，由于列强对于中国的欺压而导致的极度自卑的模式，从而步入真正的文化自信。但是，物极必反，加之在任何人群中精英都是少数，这导致了大部分人对于所谓的“文化”的自信是盲目的。我曾经思考过，对于国家的热爱存在“叶公好龙”吗？如今，我想，我已经得到了答案。当代社会，信息发达，为了一些特殊原因，涉及重大利益关系的负面新闻几乎看不到，而为了培养民众的自信精神，正面新闻和正面观点一定是要大量铺陈的。但是，负面内容看不到，不代表不存在，而可悲的是，很多人并不这么认为，负面内容的指出一定代表着敌对，可我要说，诚然，现如今存在着很多崇洋媚外的异类，但是难道大多数指出问题的人不希望国家更好吗？“世界上只是缺少发现美的眼睛”，他们或许认为，只要自身思想足够积极，社会便会充满正能量，形势也会由于这些人的乐观，而变得一片大好，然而事实永远是残酷的，过度的自信不是代表着阿Q精神，就是代表着自大。很多碍国者倒未必对我们这个国家有多少深刻的认识，也许只是搬运公知的人，也许只是刷了几条抖音就能指点江山的砖家。在他们眼中，历史进程就是我行我就能上的竞技游戏，政治则是我能代表祖国的心的愤怒发泄方式。他们怒从何来？不知道，或许只是在寻求这种“单相思”的快感，甚至是怼人的成就感。国家间的博弈在许多人眼中不是国际竞争，而是总统与首相，主席和总理，国务卿和外长的私人恩怨。举个例子，上某节课时，那位老师直言，trump就是个骗子，我要说，不论如何，他是一个成功人士，不论商界还是政界，如今很多的危机显然也不是他一个人造成的，而是US多年积累的问题，没有必要以攻击他个人为乐。然而可悲的是，这种现象如今并不稀奇，国家的精英之间不可避免，或是说国际舞台上再正常不过的博弈，似乎逐渐演变成了民族仇恨和个人情绪的爆发导火索。我们很多时候说这里是包容开放的，大团结、大融合的，然而一句“非我族类，其心必异”、动不动就扣“卖国贼”、“汉奸”的帽子、对于很多其他国家的消极现状的幸灾乐祸，对于我们在危机中独善其身的幻想，似乎又无数次的表明，这种精神并不存在。可以想见，当碍国者消失，理性爱国人士成为常态的时候，便是祖国最团结的时刻。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;作者：Judy&lt;br&gt;链接：&lt;a href=&quot;https://www.zhihu.com/question/267547086/answer/1317385509&quot;&gt;https://www.zhihu.com/question/267547086/answer/131738</summary>
      
    
    
    
    
    <category term="杂谈" scheme="http://tleer.github.io/tags/%E6%9D%82%E8%B0%88/"/>
    
  </entry>
  
  <entry>
    <title>求最大正方形面积</title>
    <link href="http://tleer.github.io/2021/02/04/maxsquare/"/>
    <id>http://tleer.github.io/2021/02/04/maxsquare/</id>
    <published>2021-02-04T12:02:49.000Z</published>
    <updated>2021-02-04T12:03:34.949Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> a[<span class="number">1001</span>][<span class="number">1001</span>], dp[<span class="number">1001</span>][<span class="number">1001</span>];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n, m;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; n &gt;&gt; m;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= m; j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">cin</span> &gt;&gt; a[i][j];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= m; j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (a[i][j] == <span class="number">1</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                dp[i][j] = <span class="number">1</span> + min(dp[i - <span class="number">1</span>][j - <span class="number">1</span>], min(dp[i - <span class="number">1</span>][j], dp[i][j - <span class="number">1</span>]));<span class="comment">//left up leftup</span></span><br><span class="line">            &#125;</span><br><span class="line">            ans = max(ans, dp[i][j]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; ans &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;</summary>
      
    
    
    
    
    <category term="坐标DP" scheme="http://tleer.github.io/tags/%E5%9D%90%E6%A0%87DP/"/>
    
  </entry>
  
  <entry>
    <title>晴天小猪历险记之Hill</title>
    <link href="http://tleer.github.io/2021/02/04/pig-pick-medicine/"/>
    <id>http://tleer.github.io/2021/02/04/pig-pick-medicine/</id>
    <published>2021-02-04T09:12:17.000Z</published>
    <updated>2021-02-04T11:27:26.361Z</updated>
    
    <content type="html"><![CDATA[<p>看题解，自己打一遍</p><a id="more"></a><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> dp[<span class="number">1001</span>][<span class="number">1001</span>], a[<span class="number">1001</span>][<span class="number">1001</span>];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> m, n;</span><br><span class="line"><span class="built_in">memset</span>(dp, <span class="number">0x3f</span>, <span class="keyword">sizeof</span>(dp));</span><br><span class="line"><span class="built_in">memset</span>(a, <span class="number">0x3f</span>, <span class="keyword">sizeof</span>(a));</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= i; j++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; a[i][j];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">dp[n][<span class="number">1</span>] = a[n][<span class="number">1</span>];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = n; i &gt;= <span class="number">1</span>; i--)</span><br><span class="line">&#123;</span><br><span class="line">dp[i][<span class="number">1</span>] = min(dp[i][<span class="number">1</span>], dp[i][i] + a[i][<span class="number">1</span>]);  <span class="comment">//末到当前行首</span></span><br><span class="line">dp[i][<span class="number">1</span>] = min(dp[i][<span class="number">1</span>], dp[i + <span class="number">1</span>][i + <span class="number">1</span>] + a[i][<span class="number">1</span>]); <span class="comment">//还能这么跑？！下一层最后一个（逆序dp</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= i; j++)</span><br><span class="line">&#123;</span><br><span class="line">dp[i][j] = min(dp[i][j], dp[i][j - <span class="number">1</span>] + a[i][j]); <span class="comment">//左边的</span></span><br><span class="line">dp[i][j] = min(dp[i][j], min(dp[i + <span class="number">1</span>][j], dp[i + <span class="number">1</span>][j + <span class="number">1</span>]) + a[i][j]); <span class="comment">//下边+右下</span></span><br><span class="line">&#125;</span><br><span class="line">dp[i][i] = min(dp[i][i], dp[i][<span class="number">1</span>] + a[i][i]);  <span class="comment">//最后到第一个</span></span><br><span class="line">dp[i][i] = min(dp[i][i], dp[i + <span class="number">1</span>][<span class="number">1</span>] + a[i][i]); <span class="comment">//最后到下一行第一个</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = i - <span class="number">1</span>; j &gt;= <span class="number">1</span>; --j)</span><br><span class="line">dp[i][j] = min(dp[i][j], dp[i][j + <span class="number">1</span>] + a[i][j]); <span class="comment">//从右往左跑右边的</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//第二次dp</span></span><br><span class="line">dp[i][<span class="number">1</span>] = min(dp[i][<span class="number">1</span>], dp[i][i] + a[i][<span class="number">1</span>]); <span class="comment">//到行首</span></span><br><span class="line">dp[i][<span class="number">1</span>] = min(dp[i][<span class="number">1</span>], dp[i + <span class="number">1</span>][i + <span class="number">1</span>] + a[i][<span class="number">1</span>]);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= i; j++)</span><br><span class="line">&#123;</span><br><span class="line">dp[i][j] = min(dp[i][j], dp[i][j - <span class="number">1</span>] + a[i][j]);</span><br><span class="line">dp[i][j] = min(dp[i][j], min(dp[i + <span class="number">1</span>][j], dp[i + <span class="number">1</span>][j + <span class="number">1</span>]) + a[i][j]);</span><br><span class="line">&#125;</span><br><span class="line">dp[i][i] = min(dp[i][i], dp[i][<span class="number">1</span>] + a[i][i]);</span><br><span class="line">dp[i][i] = min(dp[i][i], dp[i + <span class="number">1</span>][<span class="number">1</span>] + a[i][i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; dp[<span class="number">1</span>][<span class="number">1</span>] &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*看了题解 */</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;看题解，自己打一遍&lt;/p&gt;</summary>
    
    
    
    
    <category term="坐标DP" scheme="http://tleer.github.io/tags/%E5%9D%90%E6%A0%87DP/"/>
    
  </entry>
  
  <entry>
    <title>vscode</title>
    <link href="http://tleer.github.io/2021/02/04/vscode/"/>
    <id>http://tleer.github.io/2021/02/04/vscode/</id>
    <published>2021-02-04T08:23:25.000Z</published>
    <updated>2021-02-04T08:25:07.550Z</updated>
    
    <content type="html"><![CDATA[<p>在task里添加编译命令，从而执行编译操作。步骤如下：</p><ul><li> 按住ctrl+shift+P，打开命令面板；</li><li> 选择Configure Tasks…，选择Create tasks.json file from templates，之后会看到一系列task模板；</li><li> 选择others，创建一个task，下面是一个task的示例：</li></ul><a id="more"></a><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    &#x2F;&#x2F; See https:&#x2F;&#x2F;go.microsoft.com&#x2F;fwlink&#x2F;?LinkId&#x3D;733558</span><br><span class="line">    &#x2F;&#x2F; for the documentation about the tasks.json format</span><br><span class="line">    &quot;version&quot;: &quot;2.0.0&quot;,</span><br><span class="line">    &quot;tasks&quot;: [</span><br><span class="line">        &#123;</span><br><span class="line">            &quot;label&quot;: &quot;build hello world&quot;,     &#x2F;&#x2F; task的名字</span><br><span class="line">            &quot;type&quot;: &quot;shell&quot;,   </span><br><span class="line">            &quot;command&quot;: &quot;g++&quot;,    &#x2F;&#x2F;编译命令</span><br><span class="line">            &quot;args&quot;: [    &#x2F;&#x2F;编译参数列表</span><br><span class="line">                &quot;-g&quot;, &#x2F;&#x2F; 加上-g可以断点调试</span><br><span class="line">                &quot;main.cpp&quot;,</span><br><span class="line">                &quot;-o&quot;,</span><br><span class="line">                &quot;main.out&quot;</span><br><span class="line">            ]</span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="配置launch-json"><a href="#配置launch-json" class="headerlink" title="配置launch.json"></a>配置launch.json</h2><p>把debug的内容配置在launch.json，这样我们就可以使用断点调试了。</p><ul><li> 点击侧边栏的debug按钮，就是那只虫子图标；</li><li> 在上面的debug栏目里，点击齿轮图标；</li><li> 在下拉菜单中选择 C++ (GDB/LLDB)，这时会在.vscode文件夹下创建一个launch.json文件，用来配置debug；下面是launch.json文件的一个示例：</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    &#x2F;&#x2F; Use IntelliSense to learn about possible attributes.</span><br><span class="line">    &#x2F;&#x2F; Hover to view descriptions of existing attributes.</span><br><span class="line">    &#x2F;&#x2F; For more information, visit: https:&#x2F;&#x2F;go.microsoft.com&#x2F;fwlink&#x2F;?linkid&#x3D;830387</span><br><span class="line">    &quot;version&quot;: &quot;0.2.0&quot;,</span><br><span class="line">    &quot;configurations&quot;: [</span><br><span class="line">        &#123;</span><br><span class="line">            &quot;name&quot;: &quot;debug hello world&quot;,    &#x2F;&#x2F;名称</span><br><span class="line">            &quot;type&quot;: &quot;cppdbg&quot;,</span><br><span class="line">            &quot;request&quot;: &quot;launch&quot;,</span><br><span class="line">            &quot;program&quot;: &quot;$&#123;workspaceFolder&#125;&#x2F;main.out&quot;,    &#x2F;&#x2F;当前目录下编译后的可执行文件</span><br><span class="line">            &quot;args&quot;: [],</span><br><span class="line">            &quot;stopAtEntry&quot;: false,</span><br><span class="line">            &quot;cwd&quot;: &quot;$&#123;workspaceFolder&#125;&quot;,    &#x2F;&#x2F;表示当前目录</span><br><span class="line">            &quot;environment&quot;: [],</span><br><span class="line">            &quot;externalConsole&quot;: false, &#x2F;&#x2F; 在vscode自带的终端中运行，不打开外部终端</span><br><span class="line">            &quot;MIMode&quot;: &quot;gdb&quot;,    &#x2F;&#x2F;用gdb来debug</span><br><span class="line">            &quot;setupCommands&quot;: [</span><br><span class="line">                &#123;</span><br><span class="line">                    &quot;description&quot;: &quot;Enable pretty-printing for gdb&quot;,</span><br><span class="line">                    &quot;text&quot;: &quot;-enable-pretty-printing&quot;,</span><br><span class="line">                    &quot;ignoreFailures&quot;: true</span><br><span class="line">                &#125;</span><br><span class="line">            ],</span><br><span class="line">            &quot;preLaunchTask&quot;: &quot;build hello world&quot;  &#x2F;&#x2F;在执行debug hello world前，先执行build hello world这个task，看第4节</span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;在task里添加编译命令，从而执行编译操作。步骤如下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt; 按住ctrl+shift+P，打开命令面板；&lt;/li&gt;
&lt;li&gt; 选择Configure Tasks…，选择Create tasks.json file from templates，之后会看到一系列task模板；&lt;/li&gt;
&lt;li&gt; 选择others，创建一个task，下面是一个task的示例：&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    
    <category term="奇技淫巧" scheme="http://tleer.github.io/tags/%E5%A5%87%E6%8A%80%E6%B7%AB%E5%B7%A7/"/>
    
  </entry>
  
  <entry>
    <title>花店橱窗</title>
    <link href="http://tleer.github.io/2021/02/04/flowershop/"/>
    <id>http://tleer.github.io/2021/02/04/flowershop/</id>
    <published>2021-02-04T06:33:13.000Z</published>
    <updated>2021-02-04T08:20:54.806Z</updated>
    
    <content type="html"><![CDATA[<p>dp[i][j]表示摆了i种花，且第i种花的位置在j的最大值,location[i][j]表示第i种花摆在j时上一种花摆在哪。</p><p>1.因为可能有负数，所以dp要初始化为负无穷，dp[0][0] = 0为边界</p><p>2.第i种花的位置必须要大于第i-1种花，所以j的范围要注意，要从i-1开始，到m-(n-i)结束</p><p>3.第三个循环的k表示上一种花的位置，这里k要升序循环，因为答案要求按照字典序</p><a id="more"></a><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> dp[<span class="number">201</span>][<span class="number">201</span>], location[<span class="number">201</span>][<span class="number">201</span>], a[<span class="number">201</span>][<span class="number">201</span>];<span class="comment">//no i flower @ j</span></span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> n, m;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">(<span class="keyword">long</span> <span class="keyword">long</span> num, <span class="keyword">long</span> <span class="keyword">long</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(num == <span class="number">1</span>)</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; x &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">print(num - <span class="number">1</span>, location[num][x]);</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; x &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">memset</span>(dp, <span class="number">128</span>, <span class="keyword">sizeof</span>(dp));</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> ans = <span class="number">-214748364</span>;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; n &gt;&gt; m;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">long</span> <span class="keyword">long</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">long</span> <span class="keyword">long</span> j = <span class="number">1</span>; j &lt;= m; j++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; a[i][j];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">dp[<span class="number">0</span>][<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">long</span> <span class="keyword">long</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">long</span> <span class="keyword">long</span> j = i; j &lt;= m - (n - i); j++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">long</span> <span class="keyword">long</span> k = i - <span class="number">1</span>; k &lt;= j - <span class="number">1</span>; k++)</span><br><span class="line"><span class="keyword">if</span>(dp[i - <span class="number">1</span>][k] + a[i][j] &gt; dp[i][j])</span><br><span class="line">&#123;</span><br><span class="line">dp[i][j] = dp[i - <span class="number">1</span>][k] + a[i][j];</span><br><span class="line">location[i][j] = k;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> x;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">long</span> <span class="keyword">long</span> i = n; i &lt;= m; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(dp[n][i] &gt; ans)</span><br><span class="line">&#123;</span><br><span class="line">ans = dp[n][i];</span><br><span class="line">x = i;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; ans &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">print(n, x);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;dp[i][j]表示摆了i种花，且第i种花的位置在j的最大值,location[i][j]表示第i种花摆在j时上一种花摆在哪。&lt;/p&gt;
&lt;p&gt;1.因为可能有负数，所以dp要初始化为负无穷，dp[0][0] = 0为边界&lt;/p&gt;
&lt;p&gt;2.第i种花的位置必须要大于第i-1种花，所以j的范围要注意，要从i-1开始，到m-(n-i)结束&lt;/p&gt;
&lt;p&gt;3.第三个循环的k表示上一种花的位置，这里k要升序循环，因为答案要求按照字典序&lt;/p&gt;</summary>
    
    
    
    
    <category term="坐标DP" scheme="http://tleer.github.io/tags/%E5%9D%90%E6%A0%87DP/"/>
    
  </entry>
  
  <entry>
    <title>P1006 [NOIP2008 提高组] 传纸条</title>
    <link href="http://tleer.github.io/2021/02/04/p1006/"/>
    <id>http://tleer.github.io/2021/02/04/p1006/</id>
    <published>2021-02-03T22:36:59.000Z</published>
    <updated>2021-02-04T00:23:06.594Z</updated>
    
    <content type="html"><![CDATA[<p>DP数组：</p><p>第一维度维护的是在传的过程中纵坐标与横坐标的和。</p><h3 id="在同一斜线上，剩下表示两个点的从坐标就可以表示这两个点的位置。"><a href="#在同一斜线上，剩下表示两个点的从坐标就可以表示这两个点的位置。" class="headerlink" title="在同一斜线上，剩下表示两个点的从坐标就可以表示这两个点的位置。"></a>在同一斜线上，剩下表示两个点的从坐标就可以表示这两个点的位置。</h3><p>第二维度维护的是相对在左边的点的纵坐标。</p><p>第三维度维护的是相对在右边的点的纵坐标。</p><p>当查询一个情况时，只有四种情况可以到他</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">F[sum][i][j]=max&#123;F[sum<span class="number">-1</span>][i][j]+F[sum<span class="number">-1</span>][i][j<span class="number">-1</span>]+F[sum<span class="number">-1</span>][i<span class="number">-1</span>][j]+F[sum<span class="number">-1</span>][i<span class="number">-1</span>][j<span class="number">-1</span>]&#125;</span><br></pre></td></tr></table></figure><a id="more"></a><p>sum-1 i j 即为i,j在横坐标上左移1</p><p>sum-1 i-1 j 即为i在纵坐标上上移1</p><p>sum-1 i j-1 同理</p><p>sum-1 i-1 j-1 i,j在纵坐标上上移1</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SUM 1001</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> COL 101</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> m, n;</span><br><span class="line"><span class="keyword">int</span> dp[SUM][COL][COL], a[<span class="number">1001</span>][<span class="number">1001</span>];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; m &gt;&gt; n;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= n; j++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; a[i][j];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">memset</span>(dp, <span class="number">-1</span>, <span class="keyword">sizeof</span>(dp));</span><br><span class="line">dp[<span class="number">2</span>][<span class="number">1</span>][<span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> k = <span class="number">3</span>; k &lt; m + n; k++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; n; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j = i + <span class="number">1</span>; j &lt;= n; j++)</span><br><span class="line">&#123;</span><br><span class="line">dp[k][i][j] = max(dp[k][i][j],max(dp[k - <span class="number">1</span>][i][j], max(dp[k - <span class="number">1</span>][i - <span class="number">1</span>][j], max(dp[k - <span class="number">1</span>][i][j - <span class="number">1</span>], dp[k - <span class="number">1</span>][i - <span class="number">1</span>][j - <span class="number">1</span>])))) + a[k - i][i] + a[k - j][j];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; dp[m + n - <span class="number">1</span>][n - <span class="number">1</span>][n] &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;DP数组：&lt;/p&gt;
&lt;p&gt;第一维度维护的是在传的过程中纵坐标与横坐标的和。&lt;/p&gt;
&lt;h3 id=&quot;在同一斜线上，剩下表示两个点的从坐标就可以表示这两个点的位置。&quot;&gt;&lt;a href=&quot;#在同一斜线上，剩下表示两个点的从坐标就可以表示这两个点的位置。&quot; class=&quot;headerlink&quot; title=&quot;在同一斜线上，剩下表示两个点的从坐标就可以表示这两个点的位置。&quot;&gt;&lt;/a&gt;在同一斜线上，剩下表示两个点的从坐标就可以表示这两个点的位置。&lt;/h3&gt;&lt;p&gt;第二维度维护的是相对在左边的点的纵坐标。&lt;/p&gt;
&lt;p&gt;第三维度维护的是相对在右边的点的纵坐标。&lt;/p&gt;
&lt;p&gt;当查询一个情况时，只有四种情况可以到他&lt;/p&gt;
&lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;F[sum][i][j]=max&amp;#123;F[sum&lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt;][i][j]+F[sum&lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt;][i][j&lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt;]+F[sum&lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt;][i&lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt;][j]+F[sum&lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt;][i&lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt;][j&lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt;]&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    
    <category term="luogu" scheme="http://tleer.github.io/tags/luogu/"/>
    
    <category term="坐标DP" scheme="http://tleer.github.io/tags/%E5%9D%90%E6%A0%87DP/"/>
    
  </entry>
  
  <entry>
    <title>matrixfun</title>
    <link href="http://tleer.github.io/2021/02/03/matrixfun/"/>
    <id>http://tleer.github.io/2021/02/03/matrixfun/</id>
    <published>2021-02-03T13:31:39.000Z</published>
    <updated>2021-02-04T06:35:43.682Z</updated>
    
    <content type="html"><![CDATA[<h2 id="双倍经验"><a href="#双倍经验" class="headerlink" title="双倍经验"></a><del>双倍经验</del></h2><p>dp[i][j]</p><p>i代表左边取了几个数</p><p>j代表右边取了几个数</p><p>按行取最大值即可</p><p>先把2^n算出来挺好</p><a id="more"></a><p>CODE:</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function">__int128 <span class="title">read</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  __int128 x=<span class="number">0</span>,f=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">char</span> ch=getchar();</span><br><span class="line">    <span class="keyword">while</span>(ch&lt;<span class="string">&#x27;0&#x27;</span>||ch&gt;<span class="string">&#x27;9&#x27;</span>)&#123;</span><br><span class="line">        <span class="keyword">if</span>(ch==<span class="string">&#x27;-&#x27;</span>)</span><br><span class="line">            f=<span class="number">-1</span>;</span><br><span class="line">        ch=getchar();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(ch&gt;=<span class="string">&#x27;0&#x27;</span>&amp;&amp;ch&lt;=<span class="string">&#x27;9&#x27;</span>)&#123;</span><br><span class="line">        x=x*<span class="number">10</span>+ch-<span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">        ch=getchar();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> x*f;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">(__int128 x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(x &lt; <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="built_in">putchar</span>(<span class="string">&#x27;-&#x27;</span>);</span><br><span class="line">      x = -x;</span><br><span class="line">    &#125;</span><br><span class="line">  <span class="keyword">if</span>(x &gt; <span class="number">9</span>)</span><br><span class="line">    &#123;</span><br><span class="line">      print(x / <span class="number">10</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  <span class="built_in">putchar</span>(x % <span class="number">10</span> + <span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line">__int128 dp[<span class="number">1001</span>][<span class="number">1001</span>], two[<span class="number">1001</span>], m;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Two</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">for</span> (__int128 i = <span class="number">1</span>; i &lt;= m + <span class="number">2</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">two[i] = two[i - <span class="number">1</span>] * <span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">__int128 a[<span class="number">1001</span>], ans;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  __int128 a[<span class="number">1001</span>], n;</span><br><span class="line">  n = <span class="number">1</span>;</span><br><span class="line">  m = read();</span><br><span class="line">  two[<span class="number">0</span>]=<span class="number">1</span>;</span><br><span class="line">  Two();</span><br><span class="line">  <span class="keyword">for</span>(__int128 it = <span class="number">1</span>;it &lt;= n;it++)</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="built_in">memset</span>(dp, <span class="number">0</span>, <span class="keyword">sizeof</span>(dp));</span><br><span class="line">      <span class="keyword">for</span>(__int128 i = <span class="number">1</span>;i &lt;= m;i++)</span><br><span class="line">&#123;</span><br><span class="line">  a[i] = read();</span><br><span class="line">&#125;</span><br><span class="line">      <span class="keyword">for</span>(__int128 i = <span class="number">1</span>;i &lt;= m;i++)</span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">for</span>(__int128 j = m;j &gt;= i;j--)</span><br><span class="line">    &#123;</span><br><span class="line">      dp[i][j] = max(dp[i][j], dp[i - <span class="number">1</span>][j] + two[m - j + i - <span class="number">1</span>] * a[i - <span class="number">1</span>]);</span><br><span class="line">      dp[i][j] = max(dp[i][j], dp[i][j + <span class="number">1</span>] + two[m - j + i - <span class="number">1</span>] * a[j + <span class="number">1</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">      __int128 maxx;</span><br><span class="line">      <span class="keyword">for</span>(__int128 i = <span class="number">1</span>;i &lt;= m;i++)</span><br><span class="line">&#123;</span><br><span class="line">  maxx = max(maxx, dp[i][i] + two[m] * a[i]);</span><br><span class="line">&#125;</span><br><span class="line">      ans += maxx;</span><br><span class="line">    &#125;</span><br><span class="line">  print(ans);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;双倍经验&quot;&gt;&lt;a href=&quot;#双倍经验&quot; class=&quot;headerlink&quot; title=&quot;双倍经验&quot;&gt;&lt;/a&gt;&lt;del&gt;双倍经验&lt;/del&gt;&lt;/h2&gt;&lt;p&gt;dp[i][j]&lt;/p&gt;
&lt;p&gt;i代表左边取了几个数&lt;/p&gt;
&lt;p&gt;j代表右边取了几个数&lt;/p&gt;
&lt;p&gt;按行取最大值即可&lt;/p&gt;
&lt;p&gt;先把2^n算出来挺好&lt;/p&gt;</summary>
    
    
    
    
    <category term="坐标DP" scheme="http://tleer.github.io/tags/%E5%9D%90%E6%A0%87DP/"/>
    
  </entry>
  
  <entry>
    <title>int128 奇技淫巧</title>
    <link href="http://tleer.github.io/2021/02/03/int128/"/>
    <id>http://tleer.github.io/2021/02/03/int128/</id>
    <published>2021-02-03T09:59:07.000Z</published>
    <updated>2021-02-03T10:02:49.539Z</updated>
    
    <content type="html"><![CDATA[<h2 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h2><ol><li>不支持printf，scanf，cin，cout，自己输入输出</li><li>至多可存38位</li><li>运算同int</li></ol><a id="more"></a><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function">__int128 <span class="title">read</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  __int128 x=<span class="number">0</span>,f=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">char</span> ch=getchar();</span><br><span class="line">    <span class="keyword">while</span>(ch&lt;<span class="string">&#x27;0&#x27;</span>||ch&gt;<span class="string">&#x27;9&#x27;</span>)&#123;</span><br><span class="line">        <span class="keyword">if</span>(ch==<span class="string">&#x27;-&#x27;</span>)</span><br><span class="line">            f=<span class="number">-1</span>;</span><br><span class="line">        ch=getchar();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(ch&gt;=<span class="string">&#x27;0&#x27;</span>&amp;&amp;ch&lt;=<span class="string">&#x27;9&#x27;</span>)&#123;</span><br><span class="line">        x=x*<span class="number">10</span>+ch-<span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">        ch=getchar();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> x*f;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">__int128 <span class="title">print</span><span class="params">(_int128 x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(x &lt; <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">      putchar(&#x27; - &#x27;);</span><br><span class="line">      x =- x;</span><br><span class="line">    &#125;</span><br><span class="line">  <span class="keyword">if</span>(x &gt; <span class="number">9</span>)</span><br><span class="line">    &#123;</span><br><span class="line">      print(x / <span class="number">10</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  <span class="built_in">putchar</span>(x % <span class="number">10</span> + <span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  __int128 a, b;</span><br><span class="line">  a = read();</span><br><span class="line">  b = read();</span><br><span class="line">  print(a + b);</span><br><span class="line">  <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;特点&quot;&gt;&lt;a href=&quot;#特点&quot; class=&quot;headerlink&quot; title=&quot;特点&quot;&gt;&lt;/a&gt;特点&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;不支持printf，scanf，cin，cout，自己输入输出&lt;/li&gt;
&lt;li&gt;至多可存38位&lt;/li&gt;
&lt;li&gt;运算同int&lt;/li&gt;
&lt;/ol&gt;</summary>
    
    
    
    
    <category term="奇技淫巧" scheme="http://tleer.github.io/tags/%E5%A5%87%E6%8A%80%E6%B7%AB%E5%B7%A7/"/>
    
  </entry>
  
  <entry>
    <title>nt错误大赏</title>
    <link href="http://tleer.github.io/2021/02/03/commonerrors/"/>
    <id>http://tleer.github.io/2021/02/03/commonerrors/</id>
    <published>2021-02-03T08:54:17.000Z</published>
    <updated>2021-02-04T03:20:06.294Z</updated>
    
    <content type="html"><![CDATA[<p>转自studyingfather的lg博客</p><h1 id="0-Run-Build-和-Build-amp-run-不一样！不能直接点run（一上午的教训"><a href="#0-Run-Build-和-Build-amp-run-不一样！不能直接点run（一上午的教训" class="headerlink" title="0.Run Build 和 Build&amp;run 不一样！不能直接点run（一上午的教训"></a>0.Run Build 和 Build&amp;run 不一样！不能直接点run（一上午的教训</h1><h2 id="记得开-Wall"><a href="#记得开-Wall" class="headerlink" title="记得开-Wall"></a>记得开-Wall</h2><h2 id="1-赋值运算符与等于号不分"><a href="#1-赋值运算符与等于号不分" class="headerlink" title="1.赋值运算符与等于号不分"></a>1.赋值运算符与等于号不分</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//使用-Wall编译选项会出现警告</span></span><br><span class="line"><span class="keyword">if</span>(n=<span class="number">1</span>)<span class="built_in">puts</span>(<span class="string">&quot;Yes&quot;</span>);<span class="comment">//此处应为n==1</span></span><br><span class="line"><span class="keyword">else</span> <span class="built_in">puts</span>(<span class="string">&quot;No&quot;</span>);</span><br></pre></td></tr></table></figure><a id="more"></a><h2 id="2-循环变量错误"><a href="#2-循环变量错误" class="headerlink" title="2.循环变量错误"></a>2.循环变量错误</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line"> <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=n;i++)<span class="comment">//显然应该是j++</span></span><br><span class="line">  <span class="comment">//do something</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line"> <span class="keyword">for</span>(<span class="keyword">int</span> j=n;j&gt;=<span class="number">1</span>;j++)<span class="comment">//显然应该是j--</span></span><br><span class="line">  <span class="comment">//do something</span></span><br></pre></td></tr></table></figure><h2 id="4-多组数据下未初始化变量-amp-amp-局部变量未赋初值"><a href="#4-多组数据下未初始化变量-amp-amp-局部变量未赋初值" class="headerlink" title="4.多组数据下未初始化变量&amp;&amp;局部变量未赋初值"></a>4.多组数据下未初始化变量&amp;&amp;局部变量未赋初值</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//比较好的习惯是将变量定义在循环内，从而求解每组数据时都能初始化变量</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="keyword">int</span> sum;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"> <span class="keyword">int</span> T;</span><br><span class="line"> <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;T);</span><br><span class="line"> <span class="keyword">while</span>(T--)</span><br><span class="line"> &#123;</span><br><span class="line">  <span class="comment">//int sum=0;</span></span><br><span class="line">  <span class="comment">//像上面这样定义变量就不会出事了</span></span><br><span class="line">  <span class="keyword">int</span> n;</span><br><span class="line">  <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;n);</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">  &#123;</span><br><span class="line">   <span class="keyword">int</span> num;</span><br><span class="line">   <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;num);</span><br><span class="line">   sum+=num;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,sum);</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Another Example：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">pencil</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"> <span class="keyword">int</span> shuliang,jiage;</span><br><span class="line">&#125;a[<span class="number">5</span>];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"> <span class="comment">//freopen(&quot;pencil.in&quot;,&quot;r&quot;,stdin);</span></span><br><span class="line"> <span class="comment">//freopen(&quot;pencil.out&quot;,&quot;w&quot;,stdout);</span></span><br><span class="line"> <span class="keyword">int</span> n,ans;<span class="comment">//ans没有初始化，损失惨重</span></span><br><span class="line"> <span class="comment">//打开-Wall会发出警告</span></span><br><span class="line"> <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;n);</span><br><span class="line"> <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=<span class="number">3</span>;i++)</span><br><span class="line"> &#123;</span><br><span class="line">  <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>,&amp;a[i].shuliang,&amp;a[i].jiage);</span><br><span class="line">  ans=min(ans,(<span class="keyword">int</span>)<span class="built_in">ceil</span>(n*<span class="number">1.0</span>/a[i].shuliang)*a[i].jiage);</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>,ans);</span><br><span class="line"> <span class="comment">//fclose(stdin);</span></span><br><span class="line"> <span class="comment">//fclose(stdout);</span></span><br><span class="line"> <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="5-Where-is-my-output"><a href="#5-Where-is-my-output" class="headerlink" title="5.Where is my output?"></a>5.Where is my output?</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"> freopen(<span class="string">&quot;a.out&quot;</span>,<span class="string">&quot;w&quot;</span>,<span class="built_in">stdout</span>);</span><br><span class="line"> ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line"> <span class="built_in">cout</span>&lt;&lt;<span class="number">1</span>;<span class="comment">//正确的写法是cout&lt;&lt;1&lt;&lt;endl;</span></span><br><span class="line"> <span class="comment">//在关闭与stdio的同步后，一定在每行输出结束时加上endl来刷新缓冲区</span></span><br><span class="line"> <span class="comment">//否则输出将无法立刻被写入输出文件</span></span><br><span class="line"> <span class="comment">//无论何时，每行输出都以换行符结尾都是一个好习惯（即使只有一行输出的时候也是）</span></span><br><span class="line"> fclose(<span class="built_in">stdout</span>);</span><br><span class="line"> <span class="comment">//不使用fclose时，理论上会在程序结束时先输出缓冲区内容，随后关闭文件</span></span><br><span class="line"> <span class="comment">//因此不使用fclose不会产生缓冲区内容无法输出的问题</span></span><br><span class="line"> <span class="comment">//但还是建议在考场上加上fclose，这时一定要注意这个问题</span></span><br><span class="line"> <span class="keyword">return</span> <span class="number">0</span>;<span class="comment">//缓冲区的内容将在缓冲区满或程序结束时才会输出，但这时已经无法写入文件了</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="6-关闭同步、混用输出（直接抬走"><a href="#6-关闭同步、混用输出（直接抬走" class="headerlink" title="6.关闭同步、混用输出（直接抬走"></a>6.关闭同步、混用输出（直接抬走</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//这个例子将说明，关闭与stdio的同步后，混用两种IO的后果</span></span><br><span class="line"><span class="comment">//建议单步运行来观察效果</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"> ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line"> <span class="comment">//关闭IO后，cin/cout将使用独立缓冲区，而不是将输出同步至scanf/printf的缓冲区，从而减少IO耗时</span></span><br><span class="line"> <span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;a\n&quot;</span>;</span><br><span class="line"> <span class="comment">//cout下，使用&#x27;\n&#x27;换行时，内容会被缓冲而不会被立刻输出，应该使用endl来换行并立刻刷新缓冲区</span></span><br><span class="line"> <span class="built_in">printf</span>(<span class="string">&quot;b\n&quot;</span>);</span><br><span class="line"> <span class="comment">//printf的&#x27;\n&#x27;会刷新printf的缓冲区，导致输出错位</span></span><br><span class="line"> <span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;c\n&quot;</span>;</span><br><span class="line"> <span class="keyword">return</span> <span class="number">0</span>;<span class="comment">//程序结束时，cout的缓冲区才会被输出</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="7-运算符优先级问题"><a href="#7-运算符优先级问题" class="headerlink" title="7.运算符优先级问题"></a>7.运算符优先级问题</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> a=num&lt;&lt;<span class="number">2</span>+<span class="number">1</span>;<span class="comment">//这里会被解读为num&lt;&lt;(2+1)</span></span><br><span class="line">a=(num&lt;&lt;<span class="number">2</span>)+<span class="number">1</span>;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;转自studyingfather的lg博客&lt;/p&gt;
&lt;h1 id=&quot;0-Run-Build-和-Build-amp-run-不一样！不能直接点run（一上午的教训&quot;&gt;&lt;a href=&quot;#0-Run-Build-和-Build-amp-run-不一样！不能直接点run（一上午的教训&quot; class=&quot;headerlink&quot; title=&quot;0.Run Build 和 Build&amp;amp;run 不一样！不能直接点run（一上午的教训&quot;&gt;&lt;/a&gt;0.Run Build 和 Build&amp;amp;run 不一样！不能直接点run（一上午的教训&lt;/h1&gt;&lt;h2 id=&quot;记得开-Wall&quot;&gt;&lt;a href=&quot;#记得开-Wall&quot; class=&quot;headerlink&quot; title=&quot;记得开-Wall&quot;&gt;&lt;/a&gt;记得开-Wall&lt;/h2&gt;&lt;h2 id=&quot;1-赋值运算符与等于号不分&quot;&gt;&lt;a href=&quot;#1-赋值运算符与等于号不分&quot; class=&quot;headerlink&quot; title=&quot;1.赋值运算符与等于号不分&quot;&gt;&lt;/a&gt;1.赋值运算符与等于号不分&lt;/h2&gt;&lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//使用-Wall编译选项会出现警告&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(n=&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;)&lt;span class=&quot;built_in&quot;&gt;puts&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&amp;quot;Yes&amp;quot;&lt;/span&gt;);&lt;span class=&quot;comment&quot;&gt;//此处应为n==1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;puts&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&amp;quot;No&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    
    <category term="经常犯的错" scheme="http://tleer.github.io/tags/%E7%BB%8F%E5%B8%B8%E7%8A%AF%E7%9A%84%E9%94%99/"/>
    
  </entry>
  
  <entry>
    <title>HDU 4324 Triangle LOVE</title>
    <link href="http://tleer.github.io/2021/02/03/hdu4324/"/>
    <id>http://tleer.github.io/2021/02/03/hdu4324/</id>
    <published>2021-02-03T07:17:08.000Z</published>
    <updated>2021-02-04T06:38:11.042Z</updated>
    
    <content type="html"><![CDATA[<h2 id="找不同（大雾"><a href="#找不同（大雾" class="headerlink" title="找不同（大雾"></a>找不同（大雾</h2><a id="more"></a><p>T掉的代码：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> head[<span class="number">2001</span>], in[<span class="number">2001</span>], tote;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">EDGE</span>&#123;</span></span><br><span class="line">  <span class="keyword">int</span> to, next;</span><br><span class="line">&#125;edge[<span class="number">2001</span>];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">addedge</span><span class="params">(<span class="keyword">int</span> from, <span class="keyword">int</span> to)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  edge[ ++tote].  to = to;</span><br><span class="line">  edge[tote].  next = head[from];</span><br><span class="line">  head[from] = tote;</span><br><span class="line">&#125; <span class="comment">/* </span></span><br><span class="line"><span class="comment">init:</span></span><br><span class="line"><span class="comment">memset(head, 0, sizeof(head))</span></span><br><span class="line"><span class="comment">tote = 0;</span></span><br><span class="line"><span class="comment">   */</span> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> ti;</span><br><span class="line"> <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;ti);</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> it = <span class="number">1</span>;it &lt;= ti;it++)</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">int</span> n;</span><br><span class="line">      <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;n);</span><br><span class="line">      <span class="built_in">queue</span>&lt;<span class="keyword">int</span>&gt; q;</span><br><span class="line">      <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i &lt;= n;i++)</span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">char</span> str[<span class="number">20000</span>];</span><br><span class="line">  getchar();</span><br><span class="line">  <span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>, str);</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>;j &lt; n;j++)</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">if</span>(str[j] == <span class="string">&#x27;1&#x27;</span>)</span><br><span class="line">&#123;</span><br><span class="line">  in[j + <span class="number">1</span>] ++;</span><br><span class="line">  addedge(i, j + <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">      <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i &lt;= n;i++)</span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">if</span>(in[i] == <span class="number">0</span>)</span><br><span class="line">    q.push(i);</span><br><span class="line">&#125;</span><br><span class="line">      <span class="keyword">int</span> cnt = <span class="number">0</span>;</span><br><span class="line">      <span class="keyword">while</span>(!q.empty())</span><br><span class="line">&#123;</span><br><span class="line">  cnt++;</span><br><span class="line">  <span class="keyword">int</span> k = q.front();</span><br><span class="line">  q.pop();</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> i = head[k];i != <span class="number">0</span>;i = edge[i].  next)</span><br><span class="line">    &#123;</span><br><span class="line">      in[edge[i].  to] --;</span><br><span class="line">      <span class="keyword">if</span>(in[edge[i].  to] == <span class="number">0</span>)</span><br><span class="line">q.push(edge[i].  to);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">      <span class="keyword">if</span>(cnt == n)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Case #%d: Yes&quot;</span>,it);</span><br><span class="line">  </span><br><span class="line">&#125;</span><br><span class="line">      <span class="keyword">else</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Case #%d: No&quot;</span>,it);</span><br><span class="line">      <span class="built_in">memset</span>(head, <span class="number">0</span>, <span class="keyword">sizeof</span>(head));</span><br><span class="line">      <span class="built_in">memset</span>(in, <span class="number">0</span>, <span class="keyword">sizeof</span>(in));</span><br><span class="line">      <span class="built_in">memset</span>(edge, <span class="number">0</span>, <span class="keyword">sizeof</span>(edge));</span><br><span class="line">      tote = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>AC的代码</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> head[<span class="number">2001</span>], in[<span class="number">2001</span>], tote;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">EDGE</span>&#123;</span></span><br><span class="line">  <span class="keyword">int</span> to, next;</span><br><span class="line">&#125;edge[<span class="number">2000001</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">addedge</span><span class="params">(<span class="keyword">int</span> from, <span class="keyword">int</span> to)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  edge[ ++tote].  to = to;</span><br><span class="line">  edge[tote].  next = head[from];</span><br><span class="line">  head[from] = tote;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> ti;</span><br><span class="line"> <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;ti);</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> it = <span class="number">1</span>;it &lt;= ti;it++)</span><br><span class="line">    &#123;</span><br><span class="line">      tote = <span class="number">0</span>;</span><br><span class="line">      <span class="built_in">memset</span>(head, <span class="number">0</span>, <span class="keyword">sizeof</span>(head));</span><br><span class="line">      <span class="built_in">memset</span>(in, <span class="number">0</span>, <span class="keyword">sizeof</span>(in));</span><br><span class="line">      <span class="comment">/*--------------input--------------*/</span> </span><br><span class="line">      <span class="keyword">int</span> n;</span><br><span class="line">      <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;n);</span><br><span class="line">      <span class="keyword">char</span> str[<span class="number">20000</span>];</span><br><span class="line">      <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i &lt;= n;i++)</span><br><span class="line">&#123;</span><br><span class="line">  getchar();</span><br><span class="line">  <span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>, str);</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>;j &lt; n;j++)</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">if</span>(str[j] == <span class="string">&#x27;1&#x27;</span>)</span><br><span class="line">&#123;</span><br><span class="line">  in[j + <span class="number">1</span>] ++;</span><br><span class="line">  addedge(i, j + <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">      <span class="comment">/*---------------topo--------------*/</span></span><br><span class="line">      <span class="built_in">queue</span>&lt;<span class="keyword">int</span>&gt; q;</span><br><span class="line">      <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i &lt;= n;i++)</span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">if</span>(in[i] == <span class="number">0</span>)</span><br><span class="line">    q.push(i);</span><br><span class="line">&#125;</span><br><span class="line">      <span class="keyword">int</span> cnt = <span class="number">0</span>;</span><br><span class="line">      <span class="keyword">while</span>(!q.empty())</span><br><span class="line">&#123;</span><br><span class="line">  cnt++;</span><br><span class="line">  <span class="keyword">int</span> k = q.front();</span><br><span class="line">  q.pop();</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> i = head[k];i != <span class="number">0</span>;i = edge[i].  next)</span><br><span class="line">    &#123;</span><br><span class="line">      in[edge[i].  to] --;</span><br><span class="line">      <span class="keyword">if</span>(in[edge[i].  to] == <span class="number">0</span>)</span><br><span class="line">q.push(edge[i].  to);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">      <span class="comment">/*--------------output-------------*/</span> </span><br><span class="line">      <span class="keyword">if</span>(cnt == n)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Case #%d: No\n&quot;</span>,it);</span><br><span class="line">  </span><br><span class="line">&#125;</span><br><span class="line">      <span class="keyword">else</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Case #%d: Yes\n&quot;</span>,it);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;找不同（大雾&quot;&gt;&lt;a href=&quot;#找不同（大雾&quot; class=&quot;headerlink&quot; title=&quot;找不同（大雾&quot;&gt;&lt;/a&gt;找不同（大雾&lt;/h2&gt;</summary>
    
    
    
    
    <category term="拓扑排序" scheme="http://tleer.github.io/tags/%E6%8B%93%E6%89%91%E6%8E%92%E5%BA%8F/"/>
    
    <category term="玄学" scheme="http://tleer.github.io/tags/%E7%8E%84%E5%AD%A6/"/>
    
  </entry>
  
  <entry>
    <title>P1038 [NOIP2003 提高组] 神经网络</title>
    <link href="http://tleer.github.io/2021/02/03/P1038/"/>
    <id>http://tleer.github.io/2021/02/03/P1038/</id>
    <published>2021-02-03T00:27:59.000Z</published>
    <updated>2021-02-03T01:53:58.972Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Link"><a href="#Link" class="headerlink" title="Link"></a><a href="https://www.luogu.com.cn/problem/P1038">Link</a></h1><p>当点/边权值为负时就不再传递（坑</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">EDGE</span>&#123;</span></span><br><span class="line">  <span class="keyword">int</span> to, next, w;</span><br><span class="line">&#125;edge[<span class="number">1001</span>];</span><br><span class="line"><span class="keyword">int</span> head[<span class="number">1001</span>], cnt = <span class="number">0</span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">addedge</span><span class="params">(<span class="keyword">int</span> from, <span class="keyword">int</span> to, <span class="keyword">int</span> w)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  edge[ ++cnt].  to = to;</span><br><span class="line">  edge[cnt].  next = head[from];</span><br><span class="line">  edge[cnt].  w = w;</span><br><span class="line">  head[from] = cnt;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> visited[<span class="number">1001</span>], in[<span class="number">1001</span>], c[<span class="number">1001</span>];</span><br><span class="line"><span class="keyword">bool</span> out[<span class="number">1001</span>];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> n, m;</span><br><span class="line">  <span class="built_in">queue</span> &lt;<span class="keyword">int</span>&gt; q;</span><br><span class="line">  <span class="built_in">cin</span> &gt;&gt; n &gt;&gt; m;</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i &lt;= n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">int</span> u;</span><br><span class="line">      visited[i] = out[i] = <span class="number">0</span>;</span><br><span class="line">      <span class="built_in">cin</span> &gt;&gt; c[i] &gt;&gt; u;</span><br><span class="line">      <span class="keyword">if</span>(c[i] &gt; <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">  q.push(i);</span><br><span class="line">  visited[i] = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">      <span class="keyword">else</span></span><br><span class="line">c[i] -= u;</span><br><span class="line">    &#125;</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i &lt;= m;i++)</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">int</span> from, to, w;</span><br><span class="line">      <span class="built_in">cin</span> &gt;&gt; from &gt;&gt; to &gt;&gt; w;</span><br><span class="line">      addedge(from, to, w);</span><br><span class="line">      out[from] = <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  <span class="keyword">while</span>(!q.empty())</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">int</span> k = q.front();</span><br><span class="line">      q.pop();</span><br><span class="line">      <span class="keyword">if</span>(c[k] &lt;= <span class="number">0</span>) <span class="comment">// can output</span></span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">      <span class="keyword">for</span>(<span class="keyword">int</span> i = head[k];i != <span class="number">0</span>;i = edge[i].  next)</span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">int</span> to = edge[i].  to;</span><br><span class="line">  c[to] += edge[i].  w * c[k];</span><br><span class="line">  <span class="keyword">if</span>(!visited[to])</span><br><span class="line">    &#123;</span><br><span class="line">      q.push(to);</span><br><span class="line">      visited[to] = <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">    &#125;</span><br><span class="line">  <span class="keyword">bool</span> yay = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i &lt;= n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">if</span>(!out[i] &amp;&amp; c[i] &gt; <span class="number">0</span>) <span class="comment">// out layer and excited</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="built_in">cout</span> &lt;&lt; i &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; c[i] &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">  yay = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">    &#125;</span><br><span class="line">  <span class="keyword">if</span>(yay == <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;NULL&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Link&quot;&gt;&lt;a href=&quot;#Link&quot; class=&quot;headerlink&quot; title=&quot;Link&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://www.luogu.com.cn/problem/P1038&quot;&gt;Link&lt;/a&gt;&lt;/h1&gt;&lt;p&gt;当点/边权值为负时</summary>
      
    
    
    
    
    <category term="拓扑排序" scheme="http://tleer.github.io/tags/%E6%8B%93%E6%89%91%E6%8E%92%E5%BA%8F/"/>
    
    <category term="luogu" scheme="http://tleer.github.io/tags/luogu/"/>
    
  </entry>
  
  <entry>
    <title>LIS</title>
    <link href="http://tleer.github.io/2021/02/03/LIS/"/>
    <id>http://tleer.github.io/2021/02/03/LIS/</id>
    <published>2021-02-02T23:58:35.000Z</published>
    <updated>2021-02-03T10:04:36.895Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Dilworth定理-最少链划分-最长反链长度"><a href="#Dilworth定理-最少链划分-最长反链长度" class="headerlink" title="Dilworth定理:最少链划分= 最长反链长度"></a>Dilworth定理:最少链划分= 最长反链长度</h1><p>n个导弹高度中最少能有多少个不上升子序列，而不上升子序列的反链是上升子序列，根据定理，所以最少多少套系统= 最长导弹高度上升序列长度。 </p><a id="more"></a><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> N=<span class="number">0</span>;</span><br><span class="line">  <span class="keyword">int</span> a;</span><br><span class="line">  <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;nums;</span><br><span class="line">  <span class="keyword">while</span>(<span class="built_in">cin</span>&gt;&gt;a)</span><br><span class="line">    &#123;</span><br><span class="line">      N++;</span><br><span class="line">      nums.push_back(a);</span><br><span class="line">    &#125;</span><br><span class="line">  <span class="keyword">int</span> result[<span class="number">1001</span>]=&#123;<span class="number">1</span>&#125;;</span><br><span class="line">  <span class="keyword">int</span> res[<span class="number">1001</span>]=&#123;<span class="number">1</span>&#125;;</span><br><span class="line">  <span class="keyword">int</span> noup=<span class="number">1</span>;</span><br><span class="line">  <span class="keyword">int</span> maxLen=<span class="number">1</span>;</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;N;i++)</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">if</span>(result[i]==<span class="number">0</span>)</span><br><span class="line">result[i] = <span class="number">1</span>;</span><br><span class="line">      <span class="comment">//upd</span></span><br><span class="line">      <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;i;j++)</span><br><span class="line">        &#123;</span><br><span class="line">  <span class="keyword">if</span>(nums[i]&gt;nums[j]) &#123;</span><br><span class="line">    <span class="keyword">if</span>((result[j]+<span class="number">1</span>)&gt;result[i])</span><br><span class="line">      result[i] = result[j] + <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>(result[j]+<span class="number">1</span>&gt;maxLen)</span><br><span class="line">      maxLen = result[j+<span class="number">1</span>];</span><br><span class="line">  &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;N;i++)</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">if</span>(res[i]==<span class="number">0</span>)</span><br><span class="line">res[i] = <span class="number">1</span>;</span><br><span class="line">      <span class="comment">//upd</span></span><br><span class="line">      <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;i;j++)</span><br><span class="line">        &#123;</span><br><span class="line">  <span class="keyword">if</span>(nums[i]&lt;=nums[j]) &#123;</span><br><span class="line">    <span class="keyword">if</span>((res[j]+<span class="number">1</span>)&gt;res[i])</span><br><span class="line">      res[i] = res[j] + <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>(res[j]+<span class="number">1</span>&gt;noup)</span><br><span class="line">      noup = res[j+<span class="number">1</span>];</span><br><span class="line">  &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  <span class="built_in">cout</span>&lt;&lt;noup&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">  <span class="built_in">cout</span>&lt;&lt;maxLen&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;Dilworth定理-最少链划分-最长反链长度&quot;&gt;&lt;a href=&quot;#Dilworth定理-最少链划分-最长反链长度&quot; class=&quot;headerlink&quot; title=&quot;Dilworth定理:最少链划分= 最长反链长度&quot;&gt;&lt;/a&gt;Dilworth定理:最少链划分= 最长反链长度&lt;/h1&gt;&lt;p&gt;n个导弹高度中最少能有多少个不上升子序列，而不上升子序列的反链是上升子序列，根据定理，所以最少多少套系统= 最长导弹高度上升序列长度。 &lt;/p&gt;</summary>
    
    
    
    
    <category term="最长上升子序列" scheme="http://tleer.github.io/tags/%E6%9C%80%E9%95%BF%E4%B8%8A%E5%8D%87%E5%AD%90%E5%BA%8F%E5%88%97/"/>
    
  </entry>
  
  <entry>
    <title>P1892 [BOI2003]团伙</title>
    <link href="http://tleer.github.io/2021/02/03/P1892/"/>
    <id>http://tleer.github.io/2021/02/03/P1892/</id>
    <published>2021-02-02T23:29:26.000Z</published>
    <updated>2021-02-04T13:35:05.625Z</updated>
    
    <content type="html"><![CDATA[<p>在某城市里住着n个人，任何两个认识的人不是朋友就是敌人，而且满足： 1、我朋友的朋友是我的朋友； 2、我敌人的敌人是我的朋友； 　　所有是朋友的人组成一个团伙。告诉你关于这n个人的m条信息，即某两个人是朋友，或者某两个人是敌人，请你编写一个程序，计算出这个城市最多可能有多少个团伙？</p><hr><h3 id="有一种操作叫反集"><a href="#有一种操作叫反集" class="headerlink" title="有一种操作叫反集"></a>有一种操作叫反集</h3><p>如果a和b是敌人，合并n+b和a，n+a和b</p><p>如果c和a是敌人，合并n+c和a，n+a和c</p><p>那么b和c就并在一起了</p><a id="more"></a><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> n, m, zz[<span class="number">1001</span>];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">find</span><span class="params">(<span class="keyword">int</span> k)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(zz[k] != k)</span><br><span class="line">    zz[k] = find(zz[k]);</span><br><span class="line">  <span class="keyword">return</span> zz[k];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="built_in">cin</span> &gt;&gt; n &gt;&gt; m;</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i &lt;= n * <span class="number">2</span>;i++)</span><br><span class="line">    &#123;</span><br><span class="line">      zz[i] = i;</span><br><span class="line">    &#125;</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i &lt;= m;i++)</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">int</span> p, x, y;</span><br><span class="line">      <span class="built_in">cin</span> &gt;&gt; p &gt;&gt; x &gt;&gt; y;</span><br><span class="line">      <span class="keyword">if</span>(p == <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">    zz[find(x)] = find(y);</span><br><span class="line">&#125;</span><br><span class="line">      <span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">  zz[find(x + n)] = find(y);</span><br><span class="line">  zz[find(y + n)] = find(x); <span class="comment">// Don&#x27;t forget this</span></span><br><span class="line">&#125;</span><br><span class="line">    &#125;</span><br><span class="line">  <span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i &lt;= n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">if</span>(zz[i] == i)</span><br><span class="line">ans++;</span><br><span class="line">    &#125;</span><br><span class="line">  <span class="built_in">cout</span> &lt;&lt; ans &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;在某城市里住着n个人，任何两个认识的人不是朋友就是敌人，而且满足： 1、我朋友的朋友是我的朋友； 2、我敌人的敌人是我的朋友； 　　所有是朋友的人组成一个团伙。告诉你关于这n个人的m条信息，即某两个人是朋友，或者某两个人是敌人，请你编写一个程序，计算出这个城市最多可能有多少个团伙？&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id=&quot;有一种操作叫反集&quot;&gt;&lt;a href=&quot;#有一种操作叫反集&quot; class=&quot;headerlink&quot; title=&quot;有一种操作叫反集&quot;&gt;&lt;/a&gt;有一种操作叫反集&lt;/h3&gt;&lt;p&gt;如果a和b是敌人，合并n+b和a，n+a和b&lt;/p&gt;
&lt;p&gt;如果c和a是敌人，合并n+c和a，n+a和c&lt;/p&gt;
&lt;p&gt;那么b和c就并在一起了&lt;/p&gt;</summary>
    
    
    
    
    <category term="luogu" scheme="http://tleer.github.io/tags/luogu/"/>
    
    <category term="并查集" scheme="http://tleer.github.io/tags/%E5%B9%B6%E6%9F%A5%E9%9B%86/"/>
    
  </entry>
  
  <entry>
    <title>LCString</title>
    <link href="http://tleer.github.io/2021/02/02/LCString/"/>
    <id>http://tleer.github.io/2021/02/02/LCString/</id>
    <published>2021-02-02T01:12:34.000Z</published>
    <updated>2021-02-03T01:54:28.052Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="built_in">string</span> a, b;</span><br><span class="line"><span class="keyword">int</span> dp[<span class="number">1001</span>][<span class="number">1001</span>], ans;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="built_in">cin</span> &gt;&gt; a &gt;&gt; b;</span><br><span class="line">  <span class="keyword">int</span> lena = a.length(), lenb = b.length();</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; lena;i++)</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>;j &lt; lenb;j++)</span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">if</span>(a[i] == b[j])</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">if</span>(i == <span class="number">0</span> ||j == <span class="number">0</span>)</span><br><span class="line">dp[i][j] = <span class="number">1</span>;</span><br><span class="line">      <span class="keyword">else</span></span><br><span class="line">dp[i][j] = max(dp[i][j],dp[i<span class="number">-1</span>][j<span class="number">-1</span>]+<span class="number">1</span>);</span><br><span class="line">      ans = max(ans, dp[i][j]);</span><br><span class="line">    &#125;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">    dp[i][j] = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">    &#125;</span><br><span class="line">  <span class="built_in">cout</span> &lt;&lt; ans &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*Substring*/</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;</summary>
      
    
    
    
    
    <category term="最长公共" scheme="http://tleer.github.io/tags/%E6%9C%80%E9%95%BF%E5%85%AC%E5%85%B1/"/>
    
  </entry>
  
  <entry>
    <title>LCS</title>
    <link href="http://tleer.github.io/2021/02/02/LCS/"/>
    <id>http://tleer.github.io/2021/02/02/LCS/</id>
    <published>2021-02-02T00:00:20.000Z</published>
    <updated>2021-02-03T01:54:19.536Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Longest-Common-Subsequence"><a href="#Longest-Common-Subsequence" class="headerlink" title="Longest Common Subsequence"></a>Longest Common Subsequence</h1><p>dp[x][y]表示s[1<del>x]和t[1</del>y]的最长公共子序列长度。答案为dp[S.len][T.len]</p><p>分三种情况</p><ol><li>s[x]不在公共子序列中：dp[x][y]=dp[x-1][y]继承上一次的状态</li><li>t[x]不在公共子序列中：dp[x][y]=dp[x][y-1]继承上一次的状态</li><li>s[x]=t[y]且s[x]与t[y]在公共子序列中 ：dp[x][y]=dp[x-1][y-1]+1长度+1<br>在程序中需要<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(s[i<span class="number">-1</span>]==t[j<span class="number">-1</span>])</span><br><span class="line">    dp[i][j]=max(dp[i][j],dp[i<span class="number">-1</span>][j<span class="number">-1</span>]+<span class="number">1</span>);</span><br></pre></td></tr></table></figure>边界条件：dp[0][y]=0;dp[x][0]=0;</li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Longest-Common-Subsequence&quot;&gt;&lt;a href=&quot;#Longest-Common-Subsequence&quot; class=&quot;headerlink&quot; title=&quot;Longest Common Subsequence&quot;&gt;&lt;/a&gt;Longest </summary>
      
    
    
    
    
    <category term="最长公共" scheme="http://tleer.github.io/tags/%E6%9C%80%E9%95%BF%E5%85%AC%E5%85%B1/"/>
    
  </entry>
  
</feed>
